import random

from data import music

YES = ['–í–µ—Ä–Ω–æ', '–ü—Ä–∞–≤–∏–ª—å–Ω–æ', '–î–∞', '–û—Ç–ª–∏—á–Ω–æ']
NO = ['–ù–µ—Ç', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–ù–µ–≤–µ—Ä–Ω–æ', '–ù–µ—É–≥–∞–¥–∞–ª']
START_COMMAND = ['–Ω–∞—á–∏–Ω–∞–µ–º', '–¥–∞']

class Message:

    welcome_message = 'üëã –ü—Ä–∏–≤–µ—Ç.\n –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –æ—Ç–≥–∞–¥–∞—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ –¥–µ—Å—è—Ç–∏ —Å–µ–∫—É–Ω–¥–Ω–æ–º—É –æ—Ç—Ä—ã–≤–∫—É.\n{}üö© –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É?'
    repeat_text = '‚Ü© –ß—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç—Ä—ã–≤–æ–∫, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–ü–æ–≤—Ç–æ—Ä–∏".\n'
    capitulate_text = 'üôÅ –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–°–¥–∞—é—Å—å", "–ü–∞—Å" –∏–ª–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏".\n'
    stats_text = 'üìä –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞".\n'
    exit_text = 'üö™ –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–í—ã—Ö–æ–¥"\n'

    first_question = 'üëç –û—Ç–ª–∏—á–Ω–æ.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {}.\n–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ç—Ä—ã–≤–æ–∫ ‚û°'

    correct_answer = 'üòé {}!\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚û°'
    incorrect_answer = '{}!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'

    help_text = '{} {} {} {}\n‚Ñπ –ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –µ—â–µ —Ä–∞–∑, –Ω–∞–∂–º–∏—Ç–µ: "–ê–ª–∏—Å–∞, –ø–æ–º–æ—â—å".'.format(repeat_text, capitulate_text, stats_text, exit_text)

sound_first_question = 'üëç –û—Ç–ª–∏—á–Ω–æ.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {}.\n–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ç—Ä—ã–≤–æ–∫ ‚û° {}'
sound_correct_answer = 'üòé {}!\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚û°'

class Buttons:
    start_button = {'title': '–ù–∞—á–∏–Ω–∞–µ–º', 'hide': True}
    capitulate_button = {'title': '–°–¥–∞—é—Å—å', 'hide': True}
    repeat_button = {'title': '–ü–æ–≤—Ç–æ—Ä–∏', 'hide': True}
    stats_button = {'title': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'hide': True}
    exit_button = {'title': '–í—ã—Ö–æ–¥', 'hide': True}

def get_random_element(arr):
    return random.choice(arr)


def welcome(session, version):
    return {
        'response': {
            'text': Message.welcome_message.format(Message.help_text),
            #'tts': f'<speaker audio="alice-sounds-game-powerup-1.opus">{welcome_sound_message}'.format(help_sound),
            'buttons': [Buttons.start_button],
            'end_session': 'false',
            'session': session,
        },
        'version': version
    }


def first_question(session, version, sound):
    return {
        'response': {
            'text': Message.first_question.format(len(music)),
            'tts': sound_first_question.format(len(music), sound),
            'buttons': [
                Buttons.repeat_button,
                Buttons.capitulate_button,
                Buttons.stats_button,
                Buttons.exit_button
            ],
            'end_session': 'false',
            'session': session,
        },
        'version': version
    }


def correct_answer(session, version):
    return {
       'response': {
           'text': Message.correct_answer.format(get_random_element(YES)),
           #'tts': f'<speaker audio="alice-sounds-game-powerup-1.opus">{sound_correct_answer.format('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')}',
           'buttons': [
               Buttons.repeat_button,
               Buttons.capitulate_button,
               Buttons.stats_button,
               Buttons.exit_button
           ],
           'end_session': 'false',
           'session': session,
       },
       'version': version
   }


def incorrect_answer(session, version):
    return {
      'response': {
          'text': Message.incorrect_answer.format(get_random_element(NO)),
           #'tts': f'<speaker audio="alice-sounds-game-powerup-1.opus">{sound_correct_answer.format('–ü—Ä–∞–≤–∏–ª—å–Ω–æ')}',
          'buttons': [
              Buttons.repeat_button,
              Buttons.capitulate_button,
              Buttons.stats_button,
              Buttons.exit_button
          ],
          'end_session': 'false',
          'session': session,
      },
      'version': version
  }


def question(session, version):
    return get_random_element(music)


def repeat(session, version):
    return '–ø–æ–≤—Ç–æ—Ä–∏'


def handler(event, context):
    session = event.get('session', {})
    version = event.get('version', {})
    request = event.get('request', {})
    song = get_random_element(music)
    sound = song.get('sound')
    
    # –ï—Å–ª–∏ —Å–µ–∞–Ω—Å –Ω–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if session.get('new'):
        return welcome(session, version)
    
    if request.get('command') in START_COMMAND:
        return first_question(session, version, sound)

    if request.get('command') in song.get('answer'):
        return correct_answer(session, version)
    
    if request.get('command') not in song.get('answer'):
        return incorrect_answer(session, version)


'''
def main():
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
    
    event = {
        'request': {},
        'session': {'new': True},
        'state': {},
        'version': '1.0'
    }
    context = {}
   
    #response = handler(event, context)
    song = get_random_element(music)

    print(song.get('answer')[0])
    

if __name__ == "__main__":
    main()
'''